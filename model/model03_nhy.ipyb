{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"model03_nhy.ipyb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q6gvstU5RzpB","executionInfo":{"status":"ok","timestamp":1639488289519,"user_tz":-540,"elapsed":2221,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"6a9f3887-a86e-4fec-8854-76fdc80147ae"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import pandas as pd"],"metadata":{"id":"0SlBlY9TR4sJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df1 = pd.read_csv(\"/content/drive/MyDrive/tensorflow 3조/data/targetData/modelFeature_02.csv\") # 요일 = 월:0 일:6\n","df1 = df1.iloc[:,1:]\n","df1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"hnDhoEgsP1zP","executionInfo":{"status":"ok","timestamp":1639488289519,"user_tz":-540,"elapsed":5,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"ba6fc2c2-38dd-4554-d24f-e5ba1f480b62"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>날짜</th>\n","      <th>읍면동</th>\n","      <th>관광기후지수</th>\n","      <th>평균기온</th>\n","      <th>일강수량</th>\n","      <th>최대풍속</th>\n","      <th>월</th>\n","      <th>요일</th>\n","      <th>총방문자수</th>\n","      <th>연도</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2018-01-01</td>\n","      <td>건입동</td>\n","      <td>33.81</td>\n","      <td>0.8</td>\n","      <td>0.0</td>\n","      <td>2.6</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>176759</td>\n","      <td>2018</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2018-01-02</td>\n","      <td>건입동</td>\n","      <td>57.30</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.5</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>154567</td>\n","      <td>2018</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2018-01-03</td>\n","      <td>건입동</td>\n","      <td>48.52</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>3.4</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>132826</td>\n","      <td>2018</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2018-01-04</td>\n","      <td>건입동</td>\n","      <td>29.42</td>\n","      <td>-1.1</td>\n","      <td>1.0</td>\n","      <td>2.1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>157389</td>\n","      <td>2018</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2018-01-05</td>\n","      <td>건입동</td>\n","      <td>21.54</td>\n","      <td>-0.4</td>\n","      <td>4.5</td>\n","      <td>3.2</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>152996</td>\n","      <td>2018</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>11675</th>\n","      <td>2019-12-27</td>\n","      <td>한림읍</td>\n","      <td>-0.53</td>\n","      <td>6.1</td>\n","      <td>0.0</td>\n","      <td>5.3</td>\n","      <td>12</td>\n","      <td>4</td>\n","      <td>208737</td>\n","      <td>2019</td>\n","    </tr>\n","    <tr>\n","      <th>11676</th>\n","      <td>2019-12-28</td>\n","      <td>한림읍</td>\n","      <td>-0.18</td>\n","      <td>7.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>12</td>\n","      <td>5</td>\n","      <td>213487</td>\n","      <td>2019</td>\n","    </tr>\n","    <tr>\n","      <th>11677</th>\n","      <td>2019-12-29</td>\n","      <td>한림읍</td>\n","      <td>-0.78</td>\n","      <td>12.3</td>\n","      <td>34.0</td>\n","      <td>3.3</td>\n","      <td>12</td>\n","      <td>6</td>\n","      <td>211347</td>\n","      <td>2019</td>\n","    </tr>\n","    <tr>\n","      <th>11678</th>\n","      <td>2019-12-30</td>\n","      <td>한림읍</td>\n","      <td>-0.40</td>\n","      <td>10.8</td>\n","      <td>0.0</td>\n","      <td>4.4</td>\n","      <td>12</td>\n","      <td>0</td>\n","      <td>206446</td>\n","      <td>2019</td>\n","    </tr>\n","    <tr>\n","      <th>11679</th>\n","      <td>2019-12-31</td>\n","      <td>한림읍</td>\n","      <td>-0.94</td>\n","      <td>2.3</td>\n","      <td>0.0</td>\n","      <td>7.2</td>\n","      <td>12</td>\n","      <td>1</td>\n","      <td>220295</td>\n","      <td>2019</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>11680 rows × 10 columns</p>\n","</div>"],"text/plain":["               날짜  읍면동  관광기후지수  평균기온  일강수량  최대풍속   월  요일   총방문자수    연도\n","0      2018-01-01  건입동   33.81   0.8   0.0   2.6   1   0  176759  2018\n","1      2018-01-02  건입동   57.30   1.0   0.0   1.5   1   1  154567  2018\n","2      2018-01-03  건입동   48.52   0.0   0.0   3.4   1   2  132826  2018\n","3      2018-01-04  건입동   29.42  -1.1   1.0   2.1   1   3  157389  2018\n","4      2018-01-05  건입동   21.54  -0.4   4.5   3.2   1   4  152996  2018\n","...           ...  ...     ...   ...   ...   ...  ..  ..     ...   ...\n","11675  2019-12-27  한림읍   -0.53   6.1   0.0   5.3  12   4  208737  2019\n","11676  2019-12-28  한림읍   -0.18   7.0   0.0   2.0  12   5  213487  2019\n","11677  2019-12-29  한림읍   -0.78  12.3  34.0   3.3  12   6  211347  2019\n","11678  2019-12-30  한림읍   -0.40  10.8   0.0   4.4  12   0  206446  2019\n","11679  2019-12-31  한림읍   -0.94   2.3   0.0   7.2  12   1  220295  2019\n","\n","[11680 rows x 10 columns]"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["df1['날짜'] = pd.to_datetime(df1['날짜'])\n","df1.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kjVmwbh8PxlJ","executionInfo":{"status":"ok","timestamp":1639488292991,"user_tz":-540,"elapsed":269,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"b1c6c287-1672-45da-8f4d-40b21e3fb1be"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["날짜        datetime64[ns]\n","읍면동               object\n","관광기후지수           float64\n","평균기온             float64\n","일강수량             float64\n","최대풍속             float64\n","월                  int64\n","요일                 int64\n","총방문자수              int64\n","연도                 int64\n","dtype: object"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["import matplotlib.font_manager as fm # 폰트 관련 용도\n","import matplotlib as mpl  # 기본 설정 만지는 용도\n","import matplotlib.pyplot as plt  # 그래프 그리는 용도"],"metadata":{"id":"qq_j_fTy3e3B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#pyplot 한글 깨질 경우 실행, 런타임 재실행\n","!sudo apt-get install -y fonts-nanum\n","!sudo fc-cache -fv\n","#!rm ~/.cache/matplotlib -rf"],"metadata":{"id":"iZAibmQ9_LtJ","executionInfo":{"status":"ok","timestamp":1639485787565,"user_tz":-540,"elapsed":9170,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"efffd6b7-3a9b-4b7b-b29a-360215acaff3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","The following NEW packages will be installed:\n","  fonts-nanum\n","0 upgraded, 1 newly installed, 0 to remove and 37 not upgraded.\n","Need to get 9,604 kB of archives.\n","After this operation, 29.5 MB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu bionic/universe amd64 fonts-nanum all 20170925-1 [9,604 kB]\n","Fetched 9,604 kB in 2s (5,596 kB/s)\n","debconf: unable to initialize frontend: Dialog\n","debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76, <> line 1.)\n","debconf: falling back to frontend: Readline\n","debconf: unable to initialize frontend: Readline\n","debconf: (This frontend requires a controlling tty.)\n","debconf: falling back to frontend: Teletype\n","dpkg-preconfigure: unable to re-open stdin: \n","Selecting previously unselected package fonts-nanum.\n","(Reading database ... 155222 files and directories currently installed.)\n","Preparing to unpack .../fonts-nanum_20170925-1_all.deb ...\n","Unpacking fonts-nanum (20170925-1) ...\n","Setting up fonts-nanum (20170925-1) ...\n","Processing triggers for fontconfig (2.12.6-0ubuntu2) ...\n","/usr/share/fonts: caching, new cache contents: 0 fonts, 1 dirs\n","/usr/share/fonts/truetype: caching, new cache contents: 0 fonts, 3 dirs\n","/usr/share/fonts/truetype/humor-sans: caching, new cache contents: 1 fonts, 0 dirs\n","/usr/share/fonts/truetype/liberation: caching, new cache contents: 16 fonts, 0 dirs\n","/usr/share/fonts/truetype/nanum: caching, new cache contents: 10 fonts, 0 dirs\n","/usr/local/share/fonts: caching, new cache contents: 0 fonts, 0 dirs\n","/root/.local/share/fonts: skipping, no such directory\n","/root/.fonts: skipping, no such directory\n","/var/cache/fontconfig: cleaning cache directory\n","/root/.cache/fontconfig: not cleaning non-existent cache directory\n","/root/.fontconfig: not cleaning non-existent cache directory\n","fc-cache: succeeded\n"]}]},{"cell_type":"code","source":["# 런타임 재실 행 후 빌드\n","fm._rebuild()"],"metadata":{"id":"ucR1vLpa4neR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["path = '/usr/share/fonts/truetype/nanum/NanumMyeongjoBold.ttf'  # 설치된 나눔글꼴중 원하는 녀석의 전체 경로를 가져오자\n","font_name = fm.FontProperties(fname=path, size=10).get_name()\n","print(font_name)\n","plt.rc('font', family=font_name)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zgVGrMBoBPqe","executionInfo":{"status":"ok","timestamp":1639488316965,"user_tz":-540,"elapsed":301,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"226587a8-34e0-4fb1-fbd5-ab94e274652d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["NanumMyeongjo\n"]}]},{"cell_type":"code","source":["t = (df1.groupby(\"읍면동\").count()).reset_index(level=['읍면동'])['읍면동'] # 16건\n","dong = []\n","for i in t:\n","  dong.append(i)\n","\n","len(dong)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TCQ5yQQRHWvF","executionInfo":{"status":"ok","timestamp":1639488318435,"user_tz":-540,"elapsed":289,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"2a62a19f-162c-4235-ac0f-a27600d1da42"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["16"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["dong"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XlygYO53bgsD","executionInfo":{"status":"ok","timestamp":1639488319834,"user_tz":-540,"elapsed":309,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"1531d45f-185b-4c64-c49d-a27a20ca12be"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['건입동',\n"," '구좌읍',\n"," '남원읍',\n"," '노형동',\n"," '대정읍',\n"," '서홍동',\n"," '성산읍',\n"," '안덕면',\n"," '애월읍',\n"," '연동',\n"," '용담1동',\n"," '우도면',\n"," '조천읍',\n"," '표선면',\n"," '한경면',\n"," '한림읍']"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["df3 = df1[df1['읍면동']==dong[0]]\n","\n","features_cosidered=['관광기후지수','평균기온','일강수량','최대풍속','총방문자수']\n","features = df3[features_cosidered]\n","features.index = df3['날짜']"],"metadata":{"id":"4JPXxjmEYj1m"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["features"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"wWJrSgOYAIsF","executionInfo":{"status":"ok","timestamp":1639488326929,"user_tz":-540,"elapsed":288,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"ef2c4418-5b51-4d1e-94f2-56d905ba3e29"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>관광기후지수</th>\n","      <th>평균기온</th>\n","      <th>일강수량</th>\n","      <th>최대풍속</th>\n","      <th>총방문자수</th>\n","    </tr>\n","    <tr>\n","      <th>날짜</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>33.81</td>\n","      <td>0.8</td>\n","      <td>0.0</td>\n","      <td>2.6</td>\n","      <td>176759</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>57.30</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.5</td>\n","      <td>154567</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>48.52</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>3.4</td>\n","      <td>132826</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>29.42</td>\n","      <td>-1.1</td>\n","      <td>1.0</td>\n","      <td>2.1</td>\n","      <td>157389</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>21.54</td>\n","      <td>-0.4</td>\n","      <td>4.5</td>\n","      <td>3.2</td>\n","      <td>152996</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.53</td>\n","      <td>0.7</td>\n","      <td>0.5</td>\n","      <td>4.2</td>\n","      <td>190487</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>-0.18</td>\n","      <td>2.1</td>\n","      <td>0.0</td>\n","      <td>1.6</td>\n","      <td>180995</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>-0.78</td>\n","      <td>7.7</td>\n","      <td>22.5</td>\n","      <td>2.3</td>\n","      <td>176850</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-0.40</td>\n","      <td>6.1</td>\n","      <td>0.0</td>\n","      <td>3.7</td>\n","      <td>171022</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>-0.94</td>\n","      <td>-2.9</td>\n","      <td>0.0</td>\n","      <td>4.9</td>\n","      <td>178430</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>730 rows × 5 columns</p>\n","</div>"],"text/plain":["            관광기후지수  평균기온  일강수량  최대풍속   총방문자수\n","날짜                                          \n","2018-01-01   33.81   0.8   0.0   2.6  176759\n","2018-01-02   57.30   1.0   0.0   1.5  154567\n","2018-01-03   48.52   0.0   0.0   3.4  132826\n","2018-01-04   29.42  -1.1   1.0   2.1  157389\n","2018-01-05   21.54  -0.4   4.5   3.2  152996\n","...            ...   ...   ...   ...     ...\n","2019-12-27   -0.53   0.7   0.5   4.2  190487\n","2019-12-28   -0.18   2.1   0.0   1.6  180995\n","2019-12-29   -0.78   7.7  22.5   2.3  176850\n","2019-12-30   -0.40   6.1   0.0   3.7  171022\n","2019-12-31   -0.94  -2.9   0.0   4.9  178430\n","\n","[730 rows x 5 columns]"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["features.plot(subplots=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":384},"id":"k9GHM4OgZf5Z","executionInfo":{"status":"ok","timestamp":1639488329923,"user_tz":-540,"elapsed":1975,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"9414a37b-aa6b-48f4-eafe-31f24d9f274a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([<matplotlib.axes._subplots.AxesSubplot object at 0x7fa7bb338990>,\n","       <matplotlib.axes._subplots.AxesSubplot object at 0x7fa7bb28e1d0>,\n","       <matplotlib.axes._subplots.AxesSubplot object at 0x7fa7bb338590>,\n","       <matplotlib.axes._subplots.AxesSubplot object at 0x7fa7bb184810>,\n","       <matplotlib.axes._subplots.AxesSubplot object at 0x7fa7bb1bab50>],\n","      dtype=object)"]},"metadata":{},"execution_count":15},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 5 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["features"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"u8O9wiX5Rapu","executionInfo":{"status":"ok","timestamp":1639488331813,"user_tz":-540,"elapsed":290,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"9fe12f15-5cda-4234-a43a-af4dd93b86a0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>관광기후지수</th>\n","      <th>평균기온</th>\n","      <th>일강수량</th>\n","      <th>최대풍속</th>\n","      <th>총방문자수</th>\n","    </tr>\n","    <tr>\n","      <th>날짜</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>33.81</td>\n","      <td>0.8</td>\n","      <td>0.0</td>\n","      <td>2.6</td>\n","      <td>176759</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>57.30</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.5</td>\n","      <td>154567</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>48.52</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>3.4</td>\n","      <td>132826</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>29.42</td>\n","      <td>-1.1</td>\n","      <td>1.0</td>\n","      <td>2.1</td>\n","      <td>157389</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>21.54</td>\n","      <td>-0.4</td>\n","      <td>4.5</td>\n","      <td>3.2</td>\n","      <td>152996</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.53</td>\n","      <td>0.7</td>\n","      <td>0.5</td>\n","      <td>4.2</td>\n","      <td>190487</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>-0.18</td>\n","      <td>2.1</td>\n","      <td>0.0</td>\n","      <td>1.6</td>\n","      <td>180995</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>-0.78</td>\n","      <td>7.7</td>\n","      <td>22.5</td>\n","      <td>2.3</td>\n","      <td>176850</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-0.40</td>\n","      <td>6.1</td>\n","      <td>0.0</td>\n","      <td>3.7</td>\n","      <td>171022</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>-0.94</td>\n","      <td>-2.9</td>\n","      <td>0.0</td>\n","      <td>4.9</td>\n","      <td>178430</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>730 rows × 5 columns</p>\n","</div>"],"text/plain":["            관광기후지수  평균기온  일강수량  최대풍속   총방문자수\n","날짜                                          \n","2018-01-01   33.81   0.8   0.0   2.6  176759\n","2018-01-02   57.30   1.0   0.0   1.5  154567\n","2018-01-03   48.52   0.0   0.0   3.4  132826\n","2018-01-04   29.42  -1.1   1.0   2.1  157389\n","2018-01-05   21.54  -0.4   4.5   3.2  152996\n","...            ...   ...   ...   ...     ...\n","2019-12-27   -0.53   0.7   0.5   4.2  190487\n","2019-12-28   -0.18   2.1   0.0   1.6  180995\n","2019-12-29   -0.78   7.7  22.5   2.3  176850\n","2019-12-30   -0.40   6.1   0.0   3.7  171022\n","2019-12-31   -0.94  -2.9   0.0   4.9  178430\n","\n","[730 rows x 5 columns]"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["## 예측 모델 만들기!!\n","import numpy as np\n","import datetime"],"metadata":{"id":"oIQmD4j7casn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# https://m.blog.naver.com/wideeyed/221160038616"],"metadata":{"id":"IfEmF2F5oo61"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Standardization\n","def data_standardization(x):\n","    x_np = np.asarray(x)\n","    return (x_np - x_np.mean()) / x_np.std()\n"," \n","# 너무 작거나 너무 큰 값이 학습을 방해하는 것을 방지하고자 정규화한다\n","# x가 양수라는 가정하에 최소값과 최대값을 이용하여 0~1사이의 값으로 변환\n","# Min-Max scaling\n","def min_max_scaling(x):\n","    x_np = np.asarray(x)\n","    return (x_np - x_np.min()) / (x_np.max() - x_np.min()+ 1e-7) # 1e-7은 0으로 나누는 오류 예방차원\n"," \n","# 정규화된 값을 원래의 값으로 되돌린다\n","# 정규화하기 이전의 org_x값과 되돌리고 싶은 x를 입력하면 역정규화된 값을 리턴한다\n","def reverse_min_max_scaling(org_x, x):\n","    org_x_np = np.asarray(org_x)\n","    x_np = np.asarray(x)\n","    return (x_np * (org_x_np.max() - org_x_np.min()+1e-7)) + org_x_np.min()"],"metadata":{"id":"V_Ys8lXCgL3P"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 하이퍼파라미터\n","input_data_column_cnt = 5  # 입력데이터의 컬럼 개수(Variable 개수)\n","output_data_column_cnt = 1 # 결과데이터의 컬럼 개수\n"," \n","seq_length = 28            # 1개 시퀀스의 길이(시계열데이터 입력 개수)\n","rnn_cell_hidden_dim = 20   # 각 셀의 (hidden)출력 크기\n","forget_bias = 1.0          # 망각편향(기본값 1.0)\n","num_stacked_layers = 1     # stacked LSTM layers 개수\n","keep_prob = 1.0            # dropout할 때 keep할 비율\n"," \n","epoch_num = 1000           # 에폭 횟수(학습용전체데이터를 몇 회 반복해서 학습할 것인가 입력)\n","learning_rate = 0.01       # 학습률"],"metadata":{"id":"yqUDcldUM1Jq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["features.info() # 데이터 정보 출력"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z2BCIsCbNqlA","executionInfo":{"status":"ok","timestamp":1639489337857,"user_tz":-540,"elapsed":290,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"d6f9583b-e5f6-44f1-a43b-8c5c3a6d30ea"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","DatetimeIndex: 730 entries, 2018-01-01 to 2019-12-31\n","Data columns (total 5 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   관광기후지수  730 non-null    float64\n"," 1   평균기온    730 non-null    float64\n"," 2   일강수량    730 non-null    float64\n"," 3   최대풍속    730 non-null    float64\n"," 4   총방문자수   730 non-null    float64\n","dtypes: float64(5)\n","memory usage: 34.2 KB\n"]}]},{"cell_type":"code","source":["features = features.astype(np.float) # 부동소수점으로 변환\n","features.info() "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dH4RAykPOL2I","executionInfo":{"status":"ok","timestamp":1639489338705,"user_tz":-540,"elapsed":6,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"0114eb57-e11d-4c98-f22d-8b275b617096"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","DatetimeIndex: 730 entries, 2018-01-01 to 2019-12-31\n","Data columns (total 5 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   관광기후지수  730 non-null    float64\n"," 1   평균기온    730 non-null    float64\n"," 2   일강수량    730 non-null    float64\n"," 3   최대풍속    730 non-null    float64\n"," 4   총방문자수   730 non-null    float64\n","dtypes: float64(5)\n","memory usage: 34.2 KB\n"]}]},{"cell_type":"code","source":["norm_features = min_max_scaling(features) # min max 정규화"],"metadata":{"id":"vorzrjkPOaRf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["norm_features.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kp8HvfF8CSzV","executionInfo":{"status":"ok","timestamp":1639489342665,"user_tz":-540,"elapsed":320,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"6e9470d4-4508-4957-ea30-c3ec83fec42f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(730, 5)"]},"metadata":{},"execution_count":72}]},{"cell_type":"code","source":["x = norm_features"],"metadata":{"id":"uo4dK5vBDz64"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y = x[:,[-1]] # 타겟은 총방문자수"],"metadata":{"id":"81X4Cm79EJTn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dataX = [] # 입력으로 사용될 Sequence Data\n","dataY = [] # 출력(타켓)으로 사용"],"metadata":{"id":"yAvlKR6GBvcc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for i in range(0, len(y) - seq_length):\n","    _x = x[i : i+seq_length]\n","    _y = y[i + seq_length] # 다음 나타날 주가(정답)\n","    if i is 0:\n","        print(_x, \"->\", _y) # 첫번째 행만 출력해 봄\n","    dataX.append(_x) # dataX 리스트에 추가\n","    dataY.append(_y) # dataY 리스트에 추가"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d-ZVLwGoQNdp","executionInfo":{"status":"ok","timestamp":1639489348276,"user_tz":-540,"elapsed":3,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"098d48af-c10e-4c08-ecb9-a6acd0e906c1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[2.13878092e-04 4.21409036e-05 3.79788390e-05 5.15055488e-05\n","  9.19640939e-01]\n"," [3.36086712e-04 4.31814197e-05 3.79788390e-05 4.57827101e-05\n","  8.04185268e-01]\n"," [2.90408054e-04 3.79788390e-05 3.79788390e-05 5.56676134e-05\n","  6.91075961e-01]\n"," [1.91038763e-04 3.22560003e-05 4.31814197e-05 4.89042585e-05\n","  8.18866951e-01]\n"," [1.50042427e-04 3.58978067e-05 6.13904521e-05 5.46270972e-05\n","  7.96012014e-01]\n"," [3.05131357e-04 4.05801294e-05 3.79788390e-05 5.35865811e-05\n","  8.15474868e-01]\n"," [1.87709111e-04 6.13904521e-05 6.39917425e-05 5.04650327e-05\n","  7.36406047e-01]\n"," [1.88021266e-04 6.13904521e-05 7.69981942e-05 5.77486456e-05\n","  7.43736483e-01]\n"," [1.83130840e-04 3.17357422e-05 4.83840004e-05 6.91943232e-05\n","  7.30688411e-01]\n"," [1.25694349e-04 2.13305808e-05 8.22007749e-05 7.17956135e-05\n","  7.49063926e-01]\n"," [9.57274847e-05 9.36464524e-06 1.08213678e-04 6.29512263e-05\n","  6.86539311e-01]\n"," [1.20387717e-04 1.24861937e-05 7.17956135e-05 5.72283876e-05\n","  6.82346031e-01]\n"," [2.90408054e-04 3.01749680e-05 4.05801294e-05 4.94245165e-05\n","  7.70071946e-01]\n"," [3.36086712e-04 4.94245165e-05 3.79788390e-05 4.78637423e-05\n","  8.26993382e-01]\n"," [3.57729448e-04 6.50322586e-05 3.79788390e-05 4.78637423e-05\n","  7.98264731e-01]\n"," [2.15126711e-04 8.42818071e-05 1.68043356e-04 4.63029681e-05\n","  7.59463884e-01]\n"," [1.96033240e-04 6.08701941e-05 7.43969038e-05 5.04650327e-05\n","  8.43433537e-01]\n"," [3.20062764e-04 5.51473553e-05 3.79788390e-05 4.99447746e-05\n","  7.50718346e-01]\n"," [3.51018119e-04 4.63029681e-05 3.79788390e-05 4.78637423e-05\n","  8.29256504e-01]\n"," [3.36086712e-04 4.11003874e-05 3.79788390e-05 4.73434843e-05\n","  9.12185641e-01]\n"," [3.28074738e-04 5.30663230e-05 3.79788390e-05 4.57827101e-05\n","  9.21269346e-01]\n"," [1.79697137e-04 5.46270972e-05 5.87891618e-05 5.15055488e-05\n","  7.91438945e-01]\n"," [2.74384105e-04 2.08103228e-05 5.35865811e-05 6.24309683e-05\n","  7.06397561e-01]\n"," [1.12375743e-04 2.60129034e-06 7.43969038e-05 5.77486456e-05\n","  8.14148210e-01]\n"," [1.45360104e-04 0.00000000e+00 4.83840004e-05 6.13904521e-05\n","  8.52912639e-01]\n"," [1.52851821e-04 2.60129034e-06 3.79788390e-05 6.45120005e-05\n","  8.08799957e-01]\n"," [2.91500596e-04 1.61280001e-05 3.79788390e-05 4.78637423e-05\n","  8.32331230e-01]\n"," [1.58366556e-04 2.44521292e-05 5.61878714e-05 5.46270972e-05\n","  9.18673259e-01]] -> [0.77008235]\n"]}]},{"cell_type":"code","source":["#학습용/테스트용 데이터 생성\n","# 전체 70%를 학습용 데이터로 사용\n","train_size = int(len(dataY) * 0.7)\n","# 나머지(30%)를 테스트용 데이터로 사용\n","test_size = len(dataY) - train_size\n"," \n","# 데이터를 잘라 학습용 데이터 생성\n","trainX = np.array(dataX[0:train_size])\n","trainY = np.array(dataY[0:train_size])\n"," \n","# 데이터를 잘라 테스트용 데이터 생성\n","testX = np.array(dataX[train_size:len(dataX)])\n","testY = np.array(dataY[train_size:len(dataY)])"],"metadata":{"id":"-5h2DjxAQW62"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(tf.__version__)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C-Vze6DCQm_m","executionInfo":{"status":"ok","timestamp":1639489055353,"user_tz":-540,"elapsed":5,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"7bb28805-4490-4167-f62c-e13bdefda218"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1.15.0\n"]}]},{"cell_type":"code","source":["#!pip uninstall tensorflow # tensorflow 버전 낮추기 위해 현재 버전 삭제"],"metadata":{"id":"cUJNy__5F5BX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#!pip install tensorflow==1.15 # tensorflow 버전 낮추기 위해 1.5 버전으로 새로 설치 후 런타임 재실행"],"metadata":{"id":"NlfIrnFFGNz9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import tensorflow as tf"],"metadata":{"id":"zImq3N2wHOuC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(tf.__version__)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6MckSpXLHHTl","executionInfo":{"status":"ok","timestamp":1639489357360,"user_tz":-540,"elapsed":3,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"fa40f366-8d1b-4b49-dc3c-37765e5196a4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1.15.0\n"]}]},{"cell_type":"code","source":["# 텐서플로우 플레이스홀더 생성\n","# 입력 X, 출력 Y를 생성한다\n","X = tf.placeholder(tf.float32, [None, seq_length, input_data_column_cnt])\n","print(\"X: \", X)\n","Y = tf.placeholder(tf.float32, [None, 1])\n","print(\"Y: \", Y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A1MjXylXHcdY","executionInfo":{"status":"ok","timestamp":1639489359236,"user_tz":-540,"elapsed":300,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"d67c4596-fca2-4a56-9ff0-6d79de1aa19f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["X:  Tensor(\"Placeholder_8:0\", shape=(?, 28, 5), dtype=float32)\n","Y:  Tensor(\"Placeholder_9:0\", shape=(?, 1), dtype=float32)\n"]}]},{"cell_type":"code","source":["# 검증용 측정지표를 산출하기 위한 targets, predictions를 생성한다\n","targets = tf.placeholder(tf.float32, [None, 1])\n","print(\"targets: \", targets)\n"," \n","predictions = tf.placeholder(tf.float32, [None, 1])\n","print(\"predictions: \", predictions)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bYqFvOKZQ99G","executionInfo":{"status":"ok","timestamp":1639489382687,"user_tz":-540,"elapsed":265,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"a84e6c63-a6ce-4243-d01a-2d86f9fe58bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["targets:  Tensor(\"Placeholder_10:0\", shape=(?, 1), dtype=float32)\n","predictions:  Tensor(\"Placeholder_11:0\", shape=(?, 1), dtype=float32)\n"]}]},{"cell_type":"code","source":["#모델(LSTM 네트워크) 생성\n","def lstm_cell():\n","    # LSTM셀을 생성\n","    # num_units: 각 Cell 출력 크기\n","    # forget_bias:  to the biases of the forget gate \n","    #              (default: 1)  in order to reduce the scale of forgetting in the beginning of the training.\n","    # state_is_tuple: True ==> accepted and returned states are 2-tuples of the c_state and m_state.\n","    # state_is_tuple: False ==> they are concatenated along the column axis.\n","    cell = tf.contrib.rnn.BasicLSTMCell(num_units=rnn_cell_hidden_dim, \n","                                        forget_bias=forget_bias, state_is_tuple=True, activation=tf.nn.softsign)\n","    if keep_prob < 1.0:\n","        cell = tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=keep_prob)\n","    return cell"],"metadata":{"id":"5goPR4LpRtik"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# num_stacked_layers개의 층으로 쌓인 Stacked RNNs 생성\n","stackedRNNs = [lstm_cell() for _ in range(num_stacked_layers)]\n","multi_cells = tf.contrib.rnn.MultiRNNCell(stackedRNNs, state_is_tuple=True) if num_stacked_layers > 1 else lstm_cell()\n"," \n","# RNN Cell(여기서는 LSTM셀임)i들을 연결\n","hypothesis, _states = tf.nn.dynamic_rnn(multi_cells, X, dtype=tf.float32)\n","print(\"hypothesis: \", hypothesis)"],"metadata":{"id":"0BKPLFOLRmjI","colab":{"base_uri":"https://localhost:8080/","height":572},"executionInfo":{"status":"error","timestamp":1639489395337,"user_tz":-540,"elapsed":300,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"832fbe35-76b5-4bca-81f5-7892701e4265"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-83-c35c55a0fb8a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# RNN Cell(여기서는 LSTM셀임)들을 연결\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mhypothesis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_states\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdynamic_rnn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmulti_cells\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"hypothesis: \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhypothesis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/util/deprecation.py\u001b[0m in \u001b[0;36mnew_func\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    322\u001b[0m               \u001b[0;34m'in a future version'\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mdate\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'after %s'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mdate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    323\u001b[0m               instructions)\n\u001b[0;32m--> 324\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    325\u001b[0m     return tf_decorator.make_decorator(\n\u001b[1;32m    326\u001b[0m         \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'deprecated'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/rnn.py\u001b[0m in \u001b[0;36mdynamic_rnn\u001b[0;34m(cell, inputs, sequence_length, initial_state, dtype, parallel_iterations, swap_memory, time_major, scope)\u001b[0m\n\u001b[1;32m    705\u001b[0m         \u001b[0mswap_memory\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mswap_memory\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    706\u001b[0m         \u001b[0msequence_length\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msequence_length\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 707\u001b[0;31m         dtype=dtype)\n\u001b[0m\u001b[1;32m    708\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    709\u001b[0m     \u001b[0;31m# Outputs of _dynamic_rnn_loop are always shaped [time, batch, depth].\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/rnn.py\u001b[0m in \u001b[0;36m_dynamic_rnn_loop\u001b[0;34m(cell, inputs, initial_state, parallel_iterations, swap_memory, sequence_length, dtype)\u001b[0m\n\u001b[1;32m    914\u001b[0m       \u001b[0mparallel_iterations\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparallel_iterations\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    915\u001b[0m       \u001b[0mmaximum_iterations\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtime_steps\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 916\u001b[0;31m       swap_memory=swap_memory)\n\u001b[0m\u001b[1;32m    917\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    918\u001b[0m   \u001b[0;31m# Unpack final output if not using output tuples.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/control_flow_ops.py\u001b[0m in \u001b[0;36mwhile_loop\u001b[0;34m(cond, body, loop_vars, shape_invariants, parallel_iterations, back_prop, swap_memory, name, maximum_iterations, return_same_structure)\u001b[0m\n\u001b[1;32m   2751\u001b[0m       \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_to_collection\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGraphKeys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mWHILE_CONTEXT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloop_context\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2752\u001b[0m     result = loop_context.BuildLoop(cond, body, loop_vars, shape_invariants,\n\u001b[0;32m-> 2753\u001b[0;31m                                     return_same_structure)\n\u001b[0m\u001b[1;32m   2754\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mmaximum_iterations\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2755\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/control_flow_ops.py\u001b[0m in \u001b[0;36mBuildLoop\u001b[0;34m(self, pred, body, loop_vars, shape_invariants, return_same_structure)\u001b[0m\n\u001b[1;32m   2243\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_default_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mutation_lock\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2244\u001b[0m         original_body_result, exit_vars = self._BuildLoop(\n\u001b[0;32m-> 2245\u001b[0;31m             pred, body, original_loop_vars, loop_vars, shape_invariants)\n\u001b[0m\u001b[1;32m   2246\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2247\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mExit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/control_flow_ops.py\u001b[0m in \u001b[0;36m_BuildLoop\u001b[0;34m(self, pred, body, original_loop_vars, loop_vars, shape_invariants)\u001b[0m\n\u001b[1;32m   2168\u001b[0m         expand_composites=True)\n\u001b[1;32m   2169\u001b[0m     \u001b[0mpre_summaries\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_collection\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGraphKeys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_SUMMARY_COLLECTION\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2170\u001b[0;31m     \u001b[0mbody_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbody\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mpacked_vars_for_body\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2171\u001b[0m     \u001b[0mpost_summaries\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_collection\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGraphKeys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_SUMMARY_COLLECTION\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2172\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_sequence_or_composite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbody_result\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/control_flow_ops.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(i, lv)\u001b[0m\n\u001b[1;32m   2703\u001b[0m         cond = lambda i, lv: (  # pylint: disable=g-long-lambda\n\u001b[1;32m   2704\u001b[0m             math_ops.logical_and(i < maximum_iterations, orig_cond(*lv)))\n\u001b[0;32m-> 2705\u001b[0;31m         \u001b[0mbody\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlv\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morig_body\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mlv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2706\u001b[0m       \u001b[0mtry_to_pack\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2707\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/rnn.py\u001b[0m in \u001b[0;36m_time_step\u001b[0;34m(time, output_ta_t, state)\u001b[0m\n\u001b[1;32m    882\u001b[0m           skip_conditionals=True)\n\u001b[1;32m    883\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 884\u001b[0;31m       \u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_state\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcall_cell\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    885\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    886\u001b[0m     \u001b[0;31m# Keras cells always wrap state as list, even if it's a single tensor.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/rnn.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    868\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mis_keras_rnn_cell\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_sequence\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    869\u001b[0m       \u001b[0mstate\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 870\u001b[0;31m     \u001b[0mcall_cell\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_t\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    871\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0msequence_length\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/rnn_cell_impl.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs, state, scope, *args, **kwargs)\u001b[0m\n\u001b[1;32m    384\u001b[0m     \u001b[0;31m# method.  See the class docstring for more details.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    385\u001b[0m     return base_layer.Layer.__call__(\n\u001b[0;32m--> 386\u001b[0;31m         self, inputs, state, scope=scope, *args, **kwargs)\n\u001b[0m\u001b[1;32m    387\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    388\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/layers/base.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    546\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    547\u001b[0m       \u001b[0;31m# Actually call layer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 548\u001b[0;31m       \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLayer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    549\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    550\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecuting_eagerly\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/engine/base_layer.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    822\u001b[0m           \u001b[0;31m# Build layer if applicable (if the `build` method has been\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    823\u001b[0m           \u001b[0;31m# overridden).\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 824\u001b[0;31m           \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_build\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    825\u001b[0m           \u001b[0mcast_inputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_inputs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    826\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/engine/base_layer.py\u001b[0m in \u001b[0;36m_maybe_build\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   2144\u001b[0m         \u001b[0;31m# operations.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2145\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mtf_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmaybe_init_scope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2146\u001b[0;31m           \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_shapes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2147\u001b[0m       \u001b[0;31m# We must set self.built since user defined build functions are not\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2148\u001b[0m       \u001b[0;31m# constrained to set self.built.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/utils/tf_utils.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(instance, input_shape)\u001b[0m\n\u001b[1;32m    304\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0minput_shape\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    305\u001b[0m       \u001b[0minput_shape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconvert_shapes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_shape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mto_tuples\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 306\u001b[0;31m     \u001b[0moutput_shape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minstance\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_shape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    307\u001b[0m     \u001b[0;31m# Return shapes from `fn` as TensorShapes.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    308\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0moutput_shape\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/rnn_cell_impl.py\u001b[0m in \u001b[0;36mbuild\u001b[0;34m(self, inputs_shape)\u001b[0m\n\u001b[1;32m    733\u001b[0m     self._kernel = self.add_variable(\n\u001b[1;32m    734\u001b[0m         \u001b[0m_WEIGHTS_VARIABLE_NAME\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 735\u001b[0;31m         shape=[input_depth + h_depth, 4 * self._num_units])\n\u001b[0m\u001b[1;32m    736\u001b[0m     self._bias = self.add_variable(\n\u001b[1;32m    737\u001b[0m         \u001b[0m_BIAS_VARIABLE_NAME\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/util/deprecation.py\u001b[0m in \u001b[0;36mnew_func\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    322\u001b[0m               \u001b[0;34m'in a future version'\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mdate\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'after %s'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mdate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    323\u001b[0m               instructions)\n\u001b[0;32m--> 324\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    325\u001b[0m     return tf_decorator.make_decorator(\n\u001b[1;32m    326\u001b[0m         \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'deprecated'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/engine/base_layer.py\u001b[0m in \u001b[0;36madd_variable\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1705\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0madd_variable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1706\u001b[0m     \u001b[0;34m\"\"\"Deprecated, do NOT use! Alias for `add_weight`.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1707\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_weight\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1708\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1709\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/layers/base.py\u001b[0m in \u001b[0;36madd_weight\u001b[0;34m(self, name, shape, dtype, initializer, regularizer, trainable, constraint, use_resource, synchronization, aggregation, partitioner, **kwargs)\u001b[0m\n\u001b[1;32m    459\u001b[0m             \u001b[0maggregation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maggregation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    460\u001b[0m             \u001b[0mgetter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_variable\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 461\u001b[0;31m             **kwargs)\n\u001b[0m\u001b[1;32m    462\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    463\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mregularizer\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/engine/base_layer.py\u001b[0m in \u001b[0;36madd_weight\u001b[0;34m(self, name, shape, dtype, initializer, regularizer, trainable, constraint, partitioner, use_resource, synchronization, aggregation, **kwargs)\u001b[0m\n\u001b[1;32m    527\u001b[0m         \u001b[0mcollections\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcollections_arg\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    528\u001b[0m         \u001b[0msynchronization\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msynchronization\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 529\u001b[0;31m         aggregation=aggregation)\n\u001b[0m\u001b[1;32m    530\u001b[0m     \u001b[0mbackend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrack_variable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvariable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    531\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/training/tracking/base.py\u001b[0m in \u001b[0;36m_add_variable_with_custom_getter\u001b[0;34m(self, name, shape, dtype, initializer, getter, overwrite, **kwargs_for_getter)\u001b[0m\n\u001b[1;32m    710\u001b[0m         \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    711\u001b[0m         \u001b[0minitializer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minitializer\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 712\u001b[0;31m         **kwargs_for_getter)\n\u001b[0m\u001b[1;32m    713\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    714\u001b[0m     \u001b[0;31m# If we set an initializer and the variable processed it, tracking will not\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/variable_scope.py\u001b[0m in \u001b[0;36mget_variable\u001b[0;34m(name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, partitioner, validate_shape, use_resource, custom_getter, constraint, synchronization, aggregation)\u001b[0m\n\u001b[1;32m   1498\u001b[0m       \u001b[0mconstraint\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconstraint\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1499\u001b[0m       \u001b[0msynchronization\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msynchronization\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1500\u001b[0;31m       aggregation=aggregation)\n\u001b[0m\u001b[1;32m   1501\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1502\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/variable_scope.py\u001b[0m in \u001b[0;36mget_variable\u001b[0;34m(self, var_store, name, shape, dtype, initializer, regularizer, reuse, trainable, collections, caching_device, partitioner, validate_shape, use_resource, custom_getter, constraint, synchronization, aggregation)\u001b[0m\n\u001b[1;32m   1241\u001b[0m           \u001b[0mconstraint\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconstraint\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1242\u001b[0m           \u001b[0msynchronization\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msynchronization\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1243\u001b[0;31m           aggregation=aggregation)\n\u001b[0m\u001b[1;32m   1244\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1245\u001b[0m   def _get_partitioned_variable(self,\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/variable_scope.py\u001b[0m in \u001b[0;36mget_variable\u001b[0;34m(self, name, shape, dtype, initializer, regularizer, reuse, trainable, collections, caching_device, partitioner, validate_shape, use_resource, custom_getter, constraint, synchronization, aggregation)\u001b[0m\n\u001b[1;32m    565\u001b[0m           \u001b[0mconstraint\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconstraint\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    566\u001b[0m           \u001b[0msynchronization\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msynchronization\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 567\u001b[0;31m           aggregation=aggregation)\n\u001b[0m\u001b[1;32m    568\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    569\u001b[0m   def _get_partitioned_variable(self,\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/variable_scope.py\u001b[0m in \u001b[0;36m_true_getter\u001b[0;34m(name, shape, dtype, initializer, regularizer, reuse, trainable, collections, caching_device, partitioner, validate_shape, use_resource, constraint, synchronization, aggregation)\u001b[0m\n\u001b[1;32m    517\u001b[0m           \u001b[0mconstraint\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconstraint\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    518\u001b[0m           \u001b[0msynchronization\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msynchronization\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 519\u001b[0;31m           aggregation=aggregation)\n\u001b[0m\u001b[1;32m    520\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    521\u001b[0m     synchronization, aggregation, trainable = (\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/variable_scope.py\u001b[0m in \u001b[0;36m_get_single_variable\u001b[0;34m(self, name, shape, dtype, initializer, regularizer, partition_info, reuse, trainable, collections, caching_device, validate_shape, use_resource, constraint, synchronization, aggregation)\u001b[0m\n\u001b[1;32m    866\u001b[0m         \u001b[0mtb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtb\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0;34m\"tensorflow/python\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    867\u001b[0m         raise ValueError(\"%s Originally defined at:\\n\\n%s\" %\n\u001b[0;32m--> 868\u001b[0;31m                          (err_msg, \"\".join(traceback.format_list(tb))))\n\u001b[0m\u001b[1;32m    869\u001b[0m       \u001b[0mfound_var\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_vars\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    870\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mshape\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_compatible_with\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfound_var\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_shape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Variable rnn/basic_lstm_cell/kernel already exists, disallowed. Did you mean to set reuse=True or reuse=tf.AUTO_REUSE in VarScope? Originally defined at:\n\n  File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/framework/ops.py\", line 1748, in __init__\n    self._traceback = tf_stack.extract_stack()\n  File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/framework/ops.py\", line 3426, in _create_op_internal\n    op_def=op_def)\n  File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/framework/ops.py\", line 3357, in create_op\n    attrs, op_def, compute_device)\n  File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/util/deprecation.py\", line 507, in new_func\n    return func(*args, **kwargs)\n  File \"/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/framework/op_def_library.py\", line 794, in _apply_op_helper\n    op_def=op_def)\n"]}]},{"cell_type":"code","source":["hypothesis = tf.contrib.layers.fully_connected(hypothesis[:, -1], output_data_column_cnt, activation_fn=tf.identity)\n","  \n","# 손실함수로 평균제곱오차를 사용한다\n","loss = tf.reduce_sum(tf.square(hypothesis - Y))\n","# 최적화함수로 AdamOptimizer를 사용한다\n","optimizer = tf.train.AdamOptimizer(learning_rate)\n","# optimizer = tf.train.RMSPropOptimizer(learning_rate) # LSTM과 궁합 별로임\n"," \n","train = optimizer.minimize(loss)\n"," \n","# RMSE(Root Mean Square Error)\n","# 제곱오차의 평균을 구하고 다시 제곱근을 구하면 평균 오차가 나온다\n","# rmse = tf.sqrt(tf.reduce_mean(tf.square(targets-predictions))) # 아래 코드와 같다\n","rmse = tf.sqrt(tf.reduce_mean(tf.squared_difference(targets, predictions)))\n"," \n"," \n","train_error_summary = [] # 학습용 데이터의 오류를 중간 중간 기록한다\n","test_error_summary = []  # 테스트용 데이터의 오류를 중간 중간 기록한다\n","test_predict = ''        # 테스트용데이터로 예측한 결과\n"," \n","sess = tf.Session()\n","sess.run(tf.global_variables_initializer())"],"metadata":{"id":"wl6dB8JeRm82","colab":{"base_uri":"https://localhost:8080/","height":381},"executionInfo":{"status":"error","timestamp":1639489094493,"user_tz":-540,"elapsed":295,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"b1eaf346-6e60-4754-9c79-2a6c6930e5f4"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-64-3b04fe28af71>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhypothesis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontrib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfully_connected\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhypothesis\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_data_column_cnt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactivation_fn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0midentity\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# 손실함수로 평균제곱오차를 사용한다\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreduce_sum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msquare\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhypothesis\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# 최적화함수로 AdamOptimizer를 사용한다\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/contrib/framework/python/ops/arg_scope.py\u001b[0m in \u001b[0;36mfunc_with_args\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    180\u001b[0m       \u001b[0mcurrent_args\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcurrent_scope\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey_func\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    181\u001b[0m       \u001b[0mcurrent_args\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 182\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcurrent_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    183\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m   \u001b[0m_add_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/contrib/layers/python/layers/layers.py\u001b[0m in \u001b[0;36mfully_connected\u001b[0;34m(inputs, num_outputs, activation_fn, normalizer_fn, normalizer_params, weights_initializer, weights_regularizer, biases_initializer, biases_regularizer, reuse, variables_collections, outputs_collections, trainable, scope)\u001b[0m\n\u001b[1;32m   1864\u001b[0m         \u001b[0m_scope\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1865\u001b[0m         _reuse=reuse)\n\u001b[0;32m-> 1866\u001b[0;31m     \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlayer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1867\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1868\u001b[0m     \u001b[0;31m# Add variables to collections.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/util/deprecation.py\u001b[0m in \u001b[0;36mnew_func\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    322\u001b[0m               \u001b[0;34m'in a future version'\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mdate\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'after %s'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mdate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    323\u001b[0m               instructions)\n\u001b[0;32m--> 324\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    325\u001b[0m     return tf_decorator.make_decorator(\n\u001b[1;32m    326\u001b[0m         \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'deprecated'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/engine/base_layer.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, inputs, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1698\u001b[0m       \u001b[0mOutput\u001b[0m \u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1699\u001b[0m     \"\"\"\n\u001b[0;32m-> 1700\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1701\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1702\u001b[0m   @deprecation.deprecated(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/layers/base.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    546\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    547\u001b[0m       \u001b[0;31m# Actually call layer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 548\u001b[0;31m       \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLayer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    549\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    550\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecuting_eagerly\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/engine/base_layer.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    817\u001b[0m         \u001b[0;31m# are casted, not before.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    818\u001b[0m         input_spec.assert_input_compatibility(self.input_spec, inputs,\n\u001b[0;32m--> 819\u001b[0;31m                                               self.name)\n\u001b[0m\u001b[1;32m    820\u001b[0m         \u001b[0mgraph\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbackend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    821\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mgraph\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_default\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbackend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname_scope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name_scope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/keras/engine/input_spec.py\u001b[0m in \u001b[0;36massert_input_compatibility\u001b[0;34m(input_spec, inputs, layer_name)\u001b[0m\n\u001b[1;32m    191\u001b[0m                          \u001b[0;34m', found ndim='\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    192\u001b[0m                          \u001b[0;34m'. Full shape received: '\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 193\u001b[0;31m                          str(x.shape.as_list()))\n\u001b[0m\u001b[1;32m    194\u001b[0m     \u001b[0;31m# Check dtype.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    195\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mspec\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Input 0 of layer fully_connected_1 is incompatible with the layer: : expected min_ndim=2, found ndim=1. Full shape received: [None]"]}]},{"cell_type":"code","source":["# 학습한다\n","start_time = datetime.datetime.now() # 시작시간을 기록한다\n","print('학습을 시작합니다...')\n","for epoch in range(epoch_num):\n","    _, _loss = sess.run([train, loss], feed_dict={X: trainX, Y: trainY})\n","    if ((epoch+1) % 100 == 0) or (epoch == epoch_num-1): # 100번째마다 또는 마지막 epoch인 경우\n","        # 학습용데이터로 rmse오차를 구한다\n","        train_predict = sess.run(hypothesis, feed_dict={X: trainX})\n","        train_error = sess.run(rmse, feed_dict={targets: trainY, predictions: train_predict})\n","        train_error_summary.append(train_error)\n"," \n","        # 테스트용데이터로 rmse오차를 구한다\n","        test_predict = sess.run(hypothesis, feed_dict={X: testX})\n","        test_error = sess.run(rmse, feed_dict={targets: testY, predictions: test_predict})\n","        test_error_summary.append(test_error)\n","        \n","        # 현재 오류를 출력한다\n","        print(\"epoch: {}, train_error(A): {}, test_error(B): {}, B-A: {}\".format(epoch+1, train_error, test_error, test_error-train_error))\n","        \n","end_time = datetime.datetime.now() # 종료시간을 기록한다\n","elapsed_time = end_time - start_time # 경과시간을 구한다\n","print('elapsed_time:',elapsed_time)\n","print('elapsed_time per epoch:',elapsed_time/epoch_num)\n"," \n"," \n","# 하이퍼파라미터 출력\n","print('input_data_column_cnt:', input_data_column_cnt, end='')\n","print(',output_data_column_cnt:', output_data_column_cnt, end='')\n"," \n","print(',seq_length:', seq_length, end='')\n","print(',rnn_cell_hidden_dim:', rnn_cell_hidden_dim, end='')\n","print(',forget_bias:', forget_bias, end='')\n","print(',num_stacked_layers:', num_stacked_layers, end='')\n","print(',keep_prob:', keep_prob, end='')\n"," \n","print(',epoch_num:', epoch_num, end='')\n","print(',learning_rate:', learning_rate, end='')\n"," \n","print(',train_error:', train_error_summary[-1], end='')\n","print(',test_error:', test_error_summary[-1], end='')\n","print(',min_test_error:', np.min(test_error_summary))\n"," "],"metadata":{"id":"IknbgVYCRnN6","colab":{"base_uri":"https://localhost:8080/","height":398},"executionInfo":{"status":"error","timestamp":1639488903969,"user_tz":-540,"elapsed":313,"user":{"displayName":"Hyo-Yeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17966661666127805530"}},"outputId":"9caa6edf-b049-4fb5-df34-6833067946d2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["학습을 시작합니다...\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-41-2483b70c18b4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'학습을 시작합니다...'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mepoch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepoch_num\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m     \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_loss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msess\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtrainX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtrainY\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepoch\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;36m100\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mepoch\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mepoch_num\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m# 100번째마다 또는 마지막 epoch인 경우\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m         \u001b[0;31m# 학습용데이터로 rmse오차를 구한다\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/client/session.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m    954\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    955\u001b[0m       result = self._run(None, fetches, feed_dict, options_ptr,\n\u001b[0;32m--> 956\u001b[0;31m                          run_metadata_ptr)\n\u001b[0m\u001b[1;32m    957\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    958\u001b[0m         \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow_core/python/client/session.py\u001b[0m in \u001b[0;36m_run\u001b[0;34m(self, handle, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1154\u001b[0m                 \u001b[0;34m'Cannot feed value of shape %r for Tensor %r, '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1155\u001b[0m                 \u001b[0;34m'which has shape %r'\u001b[0m \u001b[0;34m%\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1156\u001b[0;31m                 (np_val.shape, subfeed_t.name, str(subfeed_t.get_shape())))\n\u001b[0m\u001b[1;32m   1157\u001b[0m           \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgraph\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_feedable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msubfeed_t\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1158\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Tensor %s may not be fed.'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0msubfeed_t\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Cannot feed value of shape (491, 28, 5) for Tensor 'Placeholder:0', which has shape '(?, 28, 4)'"]}]},{"cell_type":"markdown","source":[""],"metadata":{"id":"c_b0uAU5Op8d"}},{"cell_type":"code","source":["# 결과 그래프 출력\n","plt.figure(1)\n","plt.plot(train_error_summary, 'gold')\n","plt.plot(test_error_summary, 'b')\n","plt.xlabel('Epoch(x100)')\n","plt.ylabel('Root Mean Square Error')\n"," \n","plt.figure(2)\n","plt.plot(testY, 'r')\n","plt.plot(test_predict, 'b')\n","plt.xlabel('Time Period')\n","plt.ylabel('Stock Price')\n","plt.show()"],"metadata":{"id":"0wp7l2uJSyhG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# sequence length만큼의 가장 최근 데이터를 슬라이싱한다\n","recent_data = np.array([x[len(x)-seq_length : ]])\n","print(\"recent_data.shape:\", recent_data.shape)\n","print(\"recent_data:\", recent_data)\n"," \n","# 내일 종가를 예측해본다\n","test_predict = sess.run(hypothesis, feed_dict={X: recent_data})\n"," \n","print(\"test_predict\", test_predict[0])\n","test_predict = reverse_min_max_scaling(price,test_predict) # 금액데이터 역정규화한다\n","print(\"Tomorrow's stock price\", test_predict[0]) # 예측한 주가를 출력한다"],"metadata":{"id":"eBcj_Ik0Jod4"},"execution_count":null,"outputs":[]}]}